//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ecng.Web.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Ecng.Web.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*
        ///This license text has to stay intact at all times:
        ///fleXcroll Public License Version
        ///Cross Browser Custom Scroll Bar Script by Hesido.
        ///Public version - Free for non-commercial uses.
        ///
        ///This script cannot be used in any commercially built
        ///web sites, or in sites that relates to commercial
        ///activities. 
        ///
        ///Derivative works are only allowed for personal uses,
        ///and they cannot be redistributed.
        ///For licensing options:
        ///Contact Emrah BASKAYA @ www.hesido.com
        ///
        ///FleXcroll Public Key Code: 20050907122003339        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string FlexcrollCore {
            get {
                return ResourceManager.GetString("FlexcrollCore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var _scrollablePanelIds = new Array();
        ///var _scrollablePanelIdsCount = 0;
        ///
        ///function PutScrollablePanelNewId(id)
        ///{
        ///	_scrollablePanelIds[_scrollablePanelIdsCount++] = id;
        ///}
        ///
        /////Start fleXcroll using any method you like, either inside your html like this, or you may use seperate files
        /////The latter is more ideal, but this code is here for easy viewing
        ///if (document.getElementById &amp;&amp; document.getElementsByTagName)
        ///{
        ///	var func = function()
        ///	{
        ///		for (var i = 0; i &lt; _scrollablePanelIdsCount; i++)
        ///		{
        ///	 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string FlexcrollInit {
            get {
                return ResourceManager.GetString("FlexcrollInit", resourceCulture);
            }
        }
    }
}
